# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
    - main
    - release-*
    tags:
    - 'v*'
  pull_request:
    branches:
    - main
    - release-*

jobs:
  unit_test:
    name: Unit Testing with Coverage
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: '1.21.0'

    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Run Unit tests
      run: make test

  push_to_registry:
    needs: [unit_test]
    if: success()
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        image:
        - edgenet-controller
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
  
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: '1.21.0'
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

        # See https://github.com/docker/metadata-action for the generated tags
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: edgenetio/${{ matrix.image }}

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push ${{ matrix.image }}
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./build/images/${{ matrix.image }}/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=edgenetio/${{ matrix.image }}:buildcache
          cache-to: type=registry,ref=edgenetio/${{ matrix.image }}:buildcache,mode=max
      